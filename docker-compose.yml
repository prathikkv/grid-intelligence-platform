# docker-compose.yml - Enterprise Pharmaceutical Intelligence Platform
# Local development and production deployment configuration

version: '3.8'

# ==============================
# SERVICES CONFIGURATION
# ==============================

services:
  # ==============================
  # Main Application Service
  # ==============================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        - NODE_ENV=development
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - VCS_REF=${VCS_REF:-$(git rev-parse --short HEAD)}
        - VERSION=2.0.0
    container_name: pharma-intelligence-app
    hostname: pharma-app
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "5173:5173"  # Vite dev server
      - "3001:3001"  # API server
    
    # Environment variables
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:3001/api
      - VITE_APP_NAME=Enterprise Pharmaceutical Intelligence
      - VITE_APP_VERSION=2.0.0
      - VITE_ENVIRONMENT=development
      - PORT=3001
      - VITE_DEV_SERVER_PORT=5173
      - HOST=0.0.0.0
      - LOG_LEVEL=info
      - ENABLE_PERFORMANCE_MONITORING=true
      - CACHE_ENABLED=true
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=1000
    
    # Environment file
    env_file:
      - .env
      - .env.local
    
    # Volume mounts for development
    volumes:
      - .:/app
      - /app/node_modules  # Anonymous volume for node_modules
      - ./logs:/app/logs
      - ./data:/app/data
      - ./uploads:/app/uploads
    
    # Network configuration
    networks:
      - pharma-network
    
    # Dependencies
    depends_on:
      - redis
      - postgres
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    # Logging configuration
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # ==============================
  # Redis Cache Service
  # ==============================
  redis:
    image: redis:7-alpine
    container_name: pharma-intelligence-redis
    hostname: pharma-redis
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "6379:6379"
    
    # Configuration
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-pharma123}
    
    # Environment variables
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-pharma123}
    
    # Volume for persistence
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/etc/redis/redis.conf:ro
    
    # Network configuration
    networks:
      - pharma-network
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # ==============================
  # PostgreSQL Database Service
  # ==============================
  postgres:
    image: postgres:15-alpine
    container_name: pharma-intelligence-postgres
    hostname: pharma-postgres
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "5432:5432"
    
    # Environment variables
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-pharma_intelligence}
      - POSTGRES_USER=${POSTGRES_USER:-pharma_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-pharma_password}
      - PGDATA=/var/lib/postgresql/data/pgdata
    
    # Volume for persistence
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d:ro
      - ./sql/backups:/backups
    
    # Network configuration
    networks:
      - pharma-network
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pharma_user} -d ${POSTGRES_DB:-pharma_intelligence}"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.2'
          memory: 256M

  # ==============================
  # Nginx Reverse Proxy (Production)
  # ==============================
  nginx:
    image: nginx:alpine
    container_name: pharma-intelligence-nginx
    hostname: pharma-nginx
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "80:80"
      - "443:443"
    
    # Configuration
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/sites-available:/etc/nginx/sites-available:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    
    # Network configuration
    networks:
      - pharma-network
    
    # Dependencies
    depends_on:
      - app
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    profiles:
      - production

  # ==============================
  # MongoDB for Analytics (Optional)
  # ==============================
  mongodb:
    image: mongo:6
    container_name: pharma-intelligence-mongodb
    hostname: pharma-mongodb
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "27017:27017"
    
    # Environment variables
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME:-pharma_admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-pharma_mongo_password}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE:-pharma_analytics}
    
    # Volume for persistence
    volumes:
      - mongodb-data:/data/db
      - ./config/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    
    # Network configuration
    networks:
      - pharma-network
    
    # Health check
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    profiles:
      - analytics

  # ==============================
  # Elasticsearch for Search (Optional)
  # ==============================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: pharma-intelligence-elasticsearch
    hostname: pharma-elasticsearch
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "9200:9200"
      - "9300:9300"
    
    # Environment variables
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - xpack.security.http.ssl.enabled=false
    
    # Volume for persistence
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    
    # Network configuration
    networks:
      - pharma-network
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    profiles:
      - search

  # ==============================
  # Monitoring Services
  # ==============================
  
  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: pharma-intelligence-grafana
    hostname: pharma-grafana
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "3000:3000"
    
    # Environment variables
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    
    # Volume for persistence
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    
    # Network configuration
    networks:
      - pharma-network
    
    profiles:
      - monitoring

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: pharma-intelligence-prometheus
    hostname: pharma-prometheus
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "9090:9090"
    
    # Configuration
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    # Volume for configuration and data
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    # Network configuration
    networks:
      - pharma-network
    
    profiles:
      - monitoring

# ==============================
# NETWORKS CONFIGURATION
# ==============================
networks:
  pharma-network:
    driver: bridge
    name: pharma-intelligence-network
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# ==============================
# VOLUMES CONFIGURATION
# ==============================
volumes:
  # Database volumes
  postgres-data:
    driver: local
    name: pharma-postgres-data
  
  mongodb-data:
    driver: local
    name: pharma-mongodb-data
  
  redis-data:
    driver: local
    name: pharma-redis-data
  
  elasticsearch-data:
    driver: local
    name: pharma-elasticsearch-data
  
  # Monitoring volumes
  grafana-data:
    driver: local
    name: pharma-grafana-data
  
  prometheus-data:
    driver: local
    name: pharma-prometheus-data

# ==============================
# DEVELOPMENT OVERRIDES
# ==============================

# Override for development
# Use: docker-compose -f docker-compose.yml -f docker-compose.override.yml up
---
version: '3.8'

# Development-specific overrides
services:
  app:
    build:
      target: development
    environment:
      - NODE_ENV=development
      - DEBUG=true
      - HOT_RELOAD=true
    volumes:
      - .:/app:cached
      - /app/node_modules
    ports:
      - "5173:5173"
      - "3001:3001"
      - "9229:9229"  # Node.js debugging port

# ==============================
# PRODUCTION OVERRIDES
# ==============================

# Override for production
# Use: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
---
version: '3.8'

services:
  app:
    build:
      target: production
    environment:
      - NODE_ENV=production
    volumes:
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  nginx:
    profiles: []  # Enable nginx in production

# ==============================
# TESTING OVERRIDES
# ==============================

# Override for testing
# Use: docker-compose -f docker-compose.yml -f docker-compose.test.yml up
---
version: '3.8'

services:
  app:
    build:
      target: test
    environment:
      - NODE_ENV=test
      - CI=true
    command: ["npm", "test"]
    volumes:
      - ./coverage:/app/coverage
      - ./test-results:/app/test-results

  # Test database
  postgres-test:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=pharma_intelligence_test
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_password
    tmpfs:
      - /var/lib/postgresql/data

# ==============================
# USAGE INSTRUCTIONS
# ==============================

# Development:
# docker-compose up -d
# docker-compose logs -f app

# Production:
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

# With monitoring:
# docker-compose --profile monitoring up -d

# With all services:
# docker-compose --profile analytics --profile search --profile monitoring up -d

# Testing:
# docker-compose -f docker-compose.yml -f docker-compose.test.yml up --abort-on-container-exit

# Cleanup:
# docker-compose down -v
# docker system prune -a